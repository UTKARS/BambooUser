= \BambooUser

This gem packages a rails engine which provides basic User CRUD with Signup, Login, Logout and Forgot password functionalities with others.

== Installation

Add this line to your application's Gemfile:

    gem 'bamboo_user', :git => 'git@github.com:praveenkumarsinha/BambooUser.git'

Then execute:

    $ bundle

Execute rake task to copy migrations from engine to rails application:

    rake bamboo_user:install:migrations

Edit <tt>xxxxxxxxxxxxxx_create_bamboo_user_users.bamboo_user.rb</tt> to add more fields and do up migrations:

    rake db:migrate

Mount BambooUser at specific location (from routes.rb of application):

    mount BambooUser::Engine => "/some_specific_location"

== Helpers

To check if application is available with a logged in user in session.

    logged_in?


To access already logged in user from session.

    logged_user


To generate Login form with default Forgot-password link and Signup link

    <%=login_form do |f| %>
        <%= f.text_field :email %>
        <%= f.password_field :password %>
        <%= check_box_tag(:remember_me, 1, true) %>
        <%= f.submit 'Login' %>
    <%end %>

    <%=link_to('Forgot password', bamboo_user.reset_password_path) %>
    <%=link_to('Signup', bamboo_user.sign_up_path)%>


To generate Signup form

    <%=signup_form do |f| %>
        <%= f.text_field :email %>
        <%= f.password_field :password %>
        <%= f.password_field :password_confirmation %>
        <%= f.file_field :photo %>
        <%= f.fields_for :user_detail do |ud_f| %>
            <%= ud_f.text_field :first_name %>
            .
            .
            <%= ud_f.text_field :last_name %>
        <%= end %>
        <%= f.submit 'Signup' %>
    <%end %>


To generate Forgot-password form

    <%=reset_password_form do |f| %>
        <%= f.email_field :email %>
        <%= f.submit 'Reset password' %>
    <%end %>


To generate Change-password form

    <%=change_password_form do |f| %>
        <%= f.password_field :current_password, autofocus: true %>
        <%= f.password_field :password %>
        <%= f.password_field :password_confirmation %>
        <%= f.submit 'Change password' %>
    <%end %>


== Helpers (continued) snippets

Default styled login form

    <%=login_snippet %>


Default styled signup form (small)

    <%=signup_snippet %>


Default styled signup form (extended)

    <%=signup_extended_snippet %>


Default styled forgot-password (reset password) form

    <%=reset_password_snippet %>


Default styled change-password form

    <%= change_password_snippet %>


== Callbacks

After successful signup

    def BambooUser.after_registration_success_callback(options)
        #user code
    end


After password-reset request has been placed with a valid email of user

    def BambooUser.after_password_reset_request_callback(options)
        #user code
    end


After user visit and validates correct password-reset link (may be sent over email or by other means)

    def BambooUser.after_password_reset_confirmed_callback(options)
        #user code
    end


== Customizations

It should suffice 90% of a basic rails requirement for user signup, login and other related activities.
But to customize, there are few other options kept open. Add an initializer file (may be bamboo_user_settings.rb) and keep on adjusting with below given hooks/ports

1. By default whole of application becomes "closed" the time bamboo_user engine boots up. But to make specific set of pages public (i.e available without logged in user)
    BambooUser.public_paths = {
            home: [:welcome],
            controller_name_2: [:action_1, :action_2, :action_3],
            controller_name_3: [BambooUser.all_actions]
        }

2. To specify layout for login screen <em>(Default is <b>application</b>)</em>.
    BambooUser.login_screen_layout = 'some_layout'


3. To specify layout for signup screen <em>(Default is <b>application</b>)</em>.
    BambooUser.signup_screen_layout = 'some_layout'


4. To specify redirect path after login <em>(Default is <b>main_app.root_path</b>)</em>.
    BambooUser.after_login_path = 'main_app.some_defined_path_from_routes'


5. To specify redirect path after logout <em>(Default is <b>main_app.root_path</b>)</em>.
    BambooUser.after_logout_path = 'main_app.some_defined_path_from_routes'


6. To specify redirect path after signup <em>(Default is <b>main_app.root_path</b>)</em>.
    BambooUser.after_signup_path = 'main_app.some_defined_path_from_routes'


7. In case if login screen needs to be different from the default login screen of engine then specify it (like this so that application can redirect to correct login screen in when logged-in user is not found). <em>(Default is <b>bamboo_user.login_path</b>)</em>
    BambooUser.login_screen_path = 'main_app.some_login_path_from_routes'


8. To specify redirect path after(successfull) change-password <em>(Default is <b>bamboo_user.my_profile_path</b>)</em>.
    BambooUser.after_change_password_path = 'bamboo_user.my_profile_path'


9. To specify redirect path after failed change-password <em>(Default is <b>bamboo_user.change_password_path</b>)</em>.
    BambooUser.after_change_password_failed_path = 'bamboo_user.change_password_path'


10. For scenario, in which users are not root level elements in those cases user need to be child of some other model instance. To accommodate users from other model, following settings needs to be updated.
    BambooUser.owner_class_name = 'Account'
    BambooUser.owner_class_reverse_association = 'users'


11. By default a model UserDetail is also made available to accommodate varied attributes requirements (of application), whose all attributes (except a few like <em>id, user_id, created_at, updated_at</em>) are available delegated to BambooUser::User model. If any other attributes needs to be ignored from delegation then specify them like this.
    BambooUser.detail_attributes_to_not_delegate << ['details_attribute_1', 'details_attribute_2', 'details_attribute_3' ]


== Add on facility

BambooUser engine comes equipped with photofy gem( https://github.com/praveenkumarsinha/Photofy ) and also have a photofy field <b>photo</b> by default available. To add more photofy fields or override default, specify it like this

    BambooUser.add_photofy do |user_class|
        user_class.photofy :collage
    end


== Contributing

1. Fork it ( https://github.com/praveenkumarsinha/BambooUser/fork )
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create a new Pull Request

