= \BambooUser

This gem packages a rails engine which provides basic User CRUD with Signup, Login, Logout and Forgot password functionalities with others.

== Installation

Add this line to your application's Gemfile:

    gem 'bamboo_user', :git => 'git@github.com:praveenkumarsinha/BambooUser.git'

Then execute:

    $ bundle

Execute rake task to copy migrations from engine to rails application:

    rake bamboo_user:install:migrations

Edit <tt>xxxxxxxxxxxxxx_create_bamboo_user_users.bamboo_user.rb</tt> to add more fields and do up migrations:

    rake db:migrate

Mount BambooUser at specific location (from routes.rb of application):

    mount BambooUser::Engine => "/some_specific_location"

== Helpers

To check if application is available with a logged in user in session.

    logged_in?


To access already logged in user from session.

    logged_user


To generate link (with url_options, may be from a mailer). Mainly to be used in mailers for forwarding bamboo_user generated links.

    linkify(link_path, _url_options = ActionController::Base.default_url_options)


To generate Login form with default Forgot-password link and Signup link

    <%=login_form do |f| %>
        <%= f.text_field :email %>
        <%= f.password_field :password %>
        <%= check_box_tag(:remember_me, 1, true) %>
        <%= f.submit 'Login' %>
    <%end %>

    <%=link_to('Forgot password', bamboo_user.reset_password_path) %>
    <%=link_to('Signup', bamboo_user.sign_up_path)%>


To generate Login form for STI classes (of BambooUser::User class).
(For this to work, one need to have proper setup of white_listed_sti_classes)

    <%=login_form_for(StiClass.new) do |f| %>
        <%= f.text_field :email %>
        <%= f.password_field :password %>
        <%= check_box_tag(:remember_me, 1, true) %>
        <%= f.submit 'Login' %>
    <%end %>


To generate Signup form

    <%=signup_form do |f| %>
        <%= f.email_field :email %>
        <%= f.password_field :password %>
        <%= f.password_field :password_confirmation %>
        <%= f.file_field :photo %>
        <%= f.fields_for :user_detail do |ud_f| %>
            <%= ud_f.text_field :first_name %>
            .
            .
            <%= ud_f.text_field :last_name %>
        <%end %>
        <%= f.submit 'Signup' %>
    <%end %>


To generate Signup form for STI classes (of BambooUser::User class).
(For this to work, one need to have proper setup of white_listed_sti_classes)

    <%=signup_form_for(StiClass.new) do |f| %>
        <%= f.email_field :email %>
        <%= f.password_field :password %>
        <%= f.password_field :password_confirmation %>
        <%= f.file_field :photo %>
        <%= f.fields_for :user_detail do |ud_f| %>
            <%= ud_f.text_field :first_name %>
            .
            .
            <%= ud_f.text_field :last_name %>
        <%end %>
        <%= f.submit 'Signup' %>
    <%end %>


To generate Invitation signup form

    <%=invitation_signup_form do |f| %>
        <%= f.email_field :email %>
        <%= f.submit 'Invite' %>
    <%end %>


To generate Invitation signup form for STI classes (of BambooUser::User class).
(For this to work, one need to have proper setup of white_listed_sti_classes)

    <%=invitation_signup_form_for(StiClass.new) do |f| %>
        <%= f.email_field :email %>
        <%= f.submit 'Invite' %>
    <%end %>


To generate Forgot-password form

    <%=reset_password_form do |f| %>
        <%= f.email_field :email %>
        <%= f.submit 'Reset password' %>
    <%end %>


To generate Forgot-password form for STI classes (of BambooUser::User class).
(For this to work, one need to have proper setup of white_listed_sti_classes)

    <%=reset_password_form_for(StiClass.new) do |f| %>
        <%= f.email_field :email %>
        <%= f.submit 'Reset password' %>
    <%end %>


To generate Change-password form

    <%=change_password_form do |f| %>
        <%= f.password_field :current_password, autofocus: true %>
        <%= f.password_field :password %>
        <%= f.password_field :password_confirmation %>
        <%= f.submit 'Change password' %>
    <%end %>


To generate Profile edit form

    <%=profile_form do |f| %>
        <%= f.text_field :email %>
        <%= f.password_field :password %>
        <%= f.password_field :password_confirmation %>
        <%= f.file_field :photo %>
        <%= f.fields_for :user_detail do |ud_f| %>
            <%= ud_f.text_field :first_name %>
            .
            .
            <%= ud_f.text_field :last_name %>
        <%end %>
        <%= f.submit 'Update' %>
    <%end %>


To generate Profile edit form for STI classes (of BambooUser::User class).
(For this to work, one need to have proper setup of white_listed_sti_classes)

    <%=profile_form_for(StiClass.new) do |f| %>
        <%= f.text_field :email %>
        <%= f.password_field :password %>
        <%= f.password_field :password_confirmation %>
        <%= f.file_field :photo %>
        <%= f.fields_for :user_detail do |ud_f| %>
          <%= ud_f.text_field :first_name %>
          .
          .
          <%= ud_f.text_field :last_name %>
        <%end %>
        <%= f.submit 'Update' %>
    <%end %>


== Helpers (continued) snippets

Default styled login form

    <%=login_snippet %>


Default styled signup form (small)

    <%=signup_snippet %>


Default styled signup form (extended)

    <%=signup_extended_snippet %>


Default styled invitation signup form

    <%=invitation_signup_snippet %>


Default styled forgot-password (reset password) form

    <%=reset_password_snippet %>


Default styled change-password form

    <%= change_password_snippet %>


Default styled edit profile form (small)

    <%=profile_edit_snippet %>


Default styled edit profile form (extended)

    <%=profile_edit_extended_snippet %>


== Callbacks

After invitation based signup request has been placed with a valid new email

    def BambooUser.after_request_invitation_signup_success_callback(options)
        #user code
    end


After password-reset request has been placed with a valid email of user

    def BambooUser.after_password_reset_request_callback(options)
        #user code
    end


After user visit and validates correct password-reset link (may be sent over email or by other means)

    def BambooUser.after_password_reset_confirmed_callback(options)
        #user code
    end


Filter(callback) after_login. Its like other rails filters available in controllers. Execution order of filters is the order in which they are defined. (Current implementation doesn't accommodate :if and :unless as options)

    after_login do |options|
        #user code
    end
    after_login :some_method_1_to_call, :some_method_2_to_call

    #Define callbacks methods like below (in application controller)
    def some_method_1_to_call(options)
        user = options.first
        #user code goes in here
    end


Filter(callback) after_signup. Its like other rails filters available in controllers. Execution order of filters is the order in which they are defined. (Current implementation doesn't accommodate :if and :unless as options)

    after_signup do |options|
        #user code
    end
    after_signup :some_method_3_to_call, :some_method_4_to_call

    #Define callbacks methods like below (in application controller)
    def some_method_2_to_call(options)
        user = options.first
        #user code goes in here
    end


== Customizations

It should suffice 90% of a basic rails requirement for user signup, login and other related activities.
But to customize, there are few other options kept open. Add an initializer file (may be bamboo_user_settings.rb) and keep on adjusting with below given hooks/ports

1.  By default whole of application becomes "closed" the time bamboo_user engine boots up. But to make specific set of pages public (i.e available without logged-in user)
        BambooUser.public_paths = {
                home: [:welcome],
                controller_name_2: [:action_1, :action_2, :action_3],
                controller_name_3: [BambooUser.all_actions]
            }

2.  Paths for login, signup, invitation signup, reset-password, validate_password_reset and make_password_to_signup is only accessible when no logged-in user is present and if requested from a validated session it will redirect to a specified path but <em>(Default is <b>main_app.root_path</b>)</em>.
        BambooUser.revert_back_to_after_hitting_non_validated_sessions_paths = 'main_app.root_path'


3.  To add more paths which should only be accessible when no logged-in user is present.
        BambooUser.paths_only_for_non_validated_sessions = ['main_app.root_path', 'main_app.some_custom_path']


4.  To specify layout for login screen <em>(Default is <b>application</b>)</em>.
        BambooUser.login_screen_layout = 'some_layout'


5.  To specify layout for signup screen <em>(Default is <b>application</b>)</em>.
        BambooUser.signup_screen_layout = 'some_layout'


6.  To specify layout for profile screen <em>(Default is <b>application</b>)</em>.
        BambooUser.profile_screen_layout = 'some_layout'


7.  In case if custom signup is available then it needs to be specified here to be updated in signup link at login form <em>(Default is <b>nil</b>)</em>.
        BambooUser.custom_signup_path = 'main_app.some_defined_signup_path_from_routes'


8.  To specify redirect path after login <em>(Default is <b>main_app.root_path</b>)</em>.
        BambooUser.after_login_path = 'main_app.some_defined_path_from_routes'


9.  To always redirect to specified redirect path after login <em>(Default is <b>false</b>)</em>.
        BambooUser.always_redirect_to_login_path = true


10.  To show user logged in after signup <em>(Default is <b>true</b>)</em>.
        BambooUser.auto_login_after_signup = false


11.  To specify redirect path after logout <em>(Default is <b>main_app.root_path</b>)</em>.
        BambooUser.after_logout_path = 'main_app.some_defined_path_from_routes'


12.  To specify redirect path after signup(successfull) <em>(Default is <b>main_app.root_path</b>)</em>.
        BambooUser.after_signup_path = 'main_app.some_defined_path_from_routes'


13.  To specify redirect path after signup failed <em>(Default is <b>bamboo_user.sign_up_path</b>)</em>.
        BambooUser.after_signup_failed_path = 'main_app.some_defined_path_from_routes'


14.  To specify redirect path after (invitation based) signup(successfull) <em>(Default is <b>main_app.root_path</b>)</em>.
        BambooUser.after_invitation_signup_path = 'main_app.some_defined_path_from_routes'


15. To specify redirect path after (invitation based) signup failed <em>(Default is <b>bamboo_user.invitation_sign_up_path</b>)</em>.
        BambooUser.after_invitation_signup_failed_path = 'main_app.some_defined_path_from_routes'


16. In case if login screen needs to be different from the default login screen of engine then specify it (like this so that application can redirect to correct login screen in when logged-in user is not found). <em>(Default is <b>bamboo_user.login_path</b>)</em>
        BambooUser.login_screen_path = 'main_app.some_login_path_from_routes'


17. To specify redirect path after(successfull) change-password <em>(Default is <b>bamboo_user.my_profile_path</b>)</em>.
        BambooUser.after_change_password_path = 'main_app.some_defined_myprofile_path'


18. To specify redirect path after failed change-password <em>(Default is <b>bamboo_user.change_password_path</b>)</em>.
        BambooUser.after_change_password_failed_path = 'main_app.some_defined_change_password_path'


19. To specify redirect path after(successfull) profile update <em>(Default is <b>bamboo_user.my_profile_path</b>)</em>.
        BambooUser.after_profile_save_path = 'main_app.some_defined_myprofile_path'


20. To specify redirect path after failed profile update <em>(Default is <b>bamboo_user.edit_profile_path</b>)</em>.
        BambooUser.after_profile_save_failed_path = 'main_app.some_defined_edit_profile_path'


21. For scenario, in which users are not root level elements in those cases user need to be child of some other model instance. To accommodate users from other model, following settings needs to be updated.
        BambooUser.owner_class_name = 'Account'
        BambooUser.owner_class_reverse_association = 'users'

    Note: Add a method or variable named root_element(most probably in ApplicationController) which should return an instance of BambooUser.owner_class_name which should have a :has_one or :has_many association to 'BambooUser::User'


22. By default a model UserDetail is also made available to accommodate varied attributes requirements (of application), whose all attributes (except a few like <em>id, user_id, created_at, updated_at</em>) are available delegated to BambooUser::User model. If any other attributes needs to be ignored from delegation then specify them like this.
        BambooUser.detail_attributes_to_not_delegate << ['details_attribute_1', 'details_attribute_2', 'details_attribute_3' ]


23. In situation where STI's of BambooUser::User class is being used for signup, as a secuirty measure provide a white list of class names <em>(Default is <b>{}</b>)</em>.
        BambooUser.white_listed_sti_classes = {'url-identfier-1' => 'SomeClassDescendentOfUser', 'url-identfier-2' => 'SomeOtherClassDescendentOfUser'}

    Note: Method has been upgraded to use Hash(key-value) instead of Array. This helps in full filling url-identifier requirment for dynamically loading BambooUser::User's descendants class(STIs) at various urls.


== Add on facility

1.  BambooUser engine comes equipped with photofy gem( https://github.com/praveenkumarsinha/Photofy ) and also have a photofy field <b>photo</b> by default available. To add more photofy fields or override default, specify it like this

        BambooUser.add_photofy do |user_class|
          user_class.photofy :collage
        end


2.  To render select field for any attributes need to define a method respective of field(attribute) like "select_options_for_#{some_attribute}" which should return value for options_for_select helper i.e array.
    To render select field for 'year' field add an instance method to BambooUser::User or its STI classes

        def select_options_for_year
          [2012, 2013, 2014, 2015, 2016].collect { |x| ["Year #{x}", x] }
        end


== Contributing

1. Fork it ( https://github.com/praveenkumarsinha/BambooUser/fork )
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create a new Pull Request

